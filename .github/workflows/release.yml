name: Release macOS App
on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+'
jobs:
  relase:
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Run xcode-select
      run: sudo xcode-select -s /Applications/Xcode_11.4.app

    - name: Carthage cache
      uses: actions/cache@v1
      id: carthage-cache
      with:
        path: macos/Carthage
        key: ${{ runner.os }}-carthage-${{ hashFiles('macos/Cartfile.resolved') }}
        restore-keys: |
          ${{ runner.os }}-carthage-

    - name: Carthage install
      if: steps.carthage-cache.outputs.cache-hit != 'true'
      run: |
        (cd macos && carthage bootstrap --no-use-binaries --platform macOS --cache-builds)

    - name: Bundle cache
      uses: actions/cache@v1
      id: bundle-cache
      with:
        path: macos/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('macos/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install certificate
      uses: apple-actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.DEVELOPER_ID_APPLICATION_CERTIFICATE }}
        p12-password: ${{ secrets.DEVELOPER_ID_APPLICATION_CERTIFICATE_PASSWORD }}

    - name: Build
      env:
        GIT_REF: ${{ github.ref }}
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        APPLE_ID_EMAIL: ${{ secrets.APPLE_ID_EMAIL }}
        FASTLANE_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      run: |
        cd macos
        curl -sL https://sentry.io/get-cli/ | bash
        bundle config path bundle
        bundle install --jobs 4 --retry 3
        bundle exec ruby ../.github/scripts/setup_build.rb
        bundle exec fastlane release
        zip -y -r MusicBar.zip MusicBar.app

    - name: Create release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided
      with:
        tag_name: ${{ github.ref }}
        release_name: MusicBar ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos/MusicBar.zip
        asset_name: MusicBar.zip
        asset_content_type: application/zip

    - name: Publish update
      env:
        GIT_REF: ${{ github.ref }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided
      run: |
        cd macos
        bundle exec ruby ../.github/scripts/publish_update.rb
